{
  "name": "AI_Interview_ResumeBased",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "00039b72-9338-4ecd-8516-71a22a1be431",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1328,
        1456
      ],
      "id": "a88bbd98-aee2-4bdb-b077-b27ccfccd6ba",
      "name": "Webhook1",
      "webhookId": "00039b72-9338-4ecd-8516-71a22a1be431"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "176cc3af-edff-471f-879d-a7621f39813a",
              "name": "sessionId",
              "value": "={{$json.body.sessionId}}",
              "type": "string"
            },
            {
              "id": "03972f98-5d30-4c78-83e1-228b98f3f8ee",
              "name": "name",
              "value": "={{$json.body.name}}",
              "type": "string"
            },
            {
              "id": "cc55465e-d3c2-420c-b2a7-e9067ed16e12",
              "name": "emailId",
              "value": "={{$json.body.email}}",
              "type": "string"
            },
            {
              "id": "880d38cd-16e3-4515-8090-712cdd398bb8",
              "name": "skill",
              "value": "={{ $json.body.skill }}",
              "type": "string"
            },
            {
              "id": "73495166-6189-4ff6-9aaf-6a3fca5596b8",
              "name": "level",
              "value": "={{ $json.body.level }}",
              "type": "string"
            },
            {
              "id": "6f3a510b-03e1-402d-a85f-08ac47fd953c",
              "name": "userMessage",
              "value": "={{ $json.body.userMessage }}",
              "type": "string"
            },
            {
              "id": "df25233f-48bc-40d8-b82c-eacd6e56f17e",
              "name": "password",
              "value": "={{ $json.body.password }}",
              "type": "string"
            },
            {
              "id": "5323fde5-c385-4cfa-89c2-1e26cdc3fb88",
              "name": "conversationHistory",
              "value": "={{ $json.body.conversationHistory }}",
              "type": "string"
            },
            {
              "id": "053b6751-8a71-4c72-bf19-adf65d311764",
              "name": "resumeContent",
              "value": "={{ $json.body.resumeContent }}",
              "type": "string"
            },
            {
              "id": "1c9d7b15-98a3-47be-9a4b-0658acf3d8f7",
              "name": "jobDescription",
              "value": "={{ $json.body.jobDescription }}",
              "type": "string"
            },
            {
              "id": "d761a1e7-8455-4667-98d6-992da859b4b6",
              "name": "resumeFileName",
              "value": "={{ $json.body.resumeFileName }}",
              "type": "string"
            },
            {
              "id": "242520f1-b86d-4604-b55a-f23307c9deb3",
              "name": "interviewType",
              "value": "={{ $json.body.interviewType }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1504,
        1472
      ],
      "id": "62f98d92-1e8c-4b85-9682-2c32207cbb80",
      "name": "Set Inputs1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2400,
        2240
      ],
      "id": "56a67683-670c-4d7f-a4a7-f3ebf9704e56",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "KJBaH3Lw8PnGLkH8",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200,
          "responseKey": "="
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        3184,
        1744
      ],
      "id": "d12cc64a-b506-4ee4-8c4a-9a8045b9beed",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      reply: $json.cleanOutput\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2992,
        1744
      ],
      "id": "ed4ed32d-cf58-4819-a3b1-f4f664e6a241",
      "name": "Extract First Response1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "020fb643-f1d0-4b7c-9835-c95c98df78ee",
              "name": "cleanOutput",
              "value": "={{ $json.output.startsWith('=') ? $json.output.slice(1) : $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2720,
        1824
      ],
      "id": "0e71a4e3-ca01-406f-867c-08a9118b0a91",
      "name": "Clean AI Output1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "20839847-d8ad-4d3a-ae64-84d4dd79039b",
              "name": "questionIndex",
              "value": "={{ $json.questionIndex ? parseInt($json.questionIndex) : 1 }}",
              "type": "string"
            },
            {
              "id": "35390437-eb26-4305-992f-b4bdebd686fd",
              "name": "topicIndex",
              "value": "={{ Math.floor((parseInt($json.questionIndex) || 0) / 3) }}",
              "type": "string"
            },
            {
              "id": "abb00e42-0949-458a-aff1-9b51ecbf0d91",
              "name": "status",
              "value": "={{ $json.userMessage && $json.userMessage.trim() !== '' ? 'completed' : 'pending' }}",
              "type": "string"
            },
            {
              "id": "2a29462f-683f-46ee-8cf1-2f85966e4963",
              "name": "sessionId",
              "value": "={{ $json.sessionId }}",
              "type": "string"
            },
            {
              "id": "7d3ec780-2d30-4506-849b-c77df8f8d767",
              "name": "name",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "c0d4895a-df08-4d07-885e-4bf9ac35ec07",
              "name": "email",
              "value": "={{ $json.emailId }}",
              "type": "string"
            },
            {
              "id": "182e106a-ea6d-4153-86d4-c29dee39890b",
              "name": "skill",
              "value": "={{ $json.skill }}",
              "type": "string"
            },
            {
              "id": "499ac97c-ea6f-4593-90c8-8949b1e8276e",
              "name": "level",
              "value": "={{ $json.level }}",
              "type": "string"
            },
            {
              "id": "65b065df-7336-4cca-a9eb-f0f58baea782",
              "name": "password",
              "value": "={{ $json.password }}",
              "type": "string"
            },
            {
              "id": "a3d6a0ee-e430-4bd6-ad24-0d8f0c1b18db",
              "name": "conversationHistory",
              "value": "={{ $json.conversationHistory }}",
              "type": "string"
            },
            {
              "id": "35e2e20c-1e3e-4e05-96a2-5c2b8d482731",
              "name": "interviewType",
              "value": "={{ $json.interviewType }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1664,
        1456
      ],
      "id": "b3e6e8c5-996f-48ac-94fb-7340b50495bc",
      "name": "Update Counters1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3104,
        1296
      ],
      "id": "36f16720-85d2-4f50-bd51-f6b0ba1f2898",
      "name": "Merge1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "51e07bbe-8221-42ab-941b-08cca0598668",
              "leftValue": "={{ $json.userMessage }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2064,
        1280
      ],
      "id": "ca063e6e-f16e-40e0-930d-faaacfd063e9",
      "name": "Check User Response1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a professional interviewer conducting a resume-based mock interview session.\n\nINTERVIEW SESSION ID: {{$json.sessionId}}\nCANDIDATE: {{$json.name}}\nINTERVIEW TYPE: Resume-based\nQUESTION #: {{$json.questionIndex || 1}}\nPREVIOUS ANSWER: \"{{$json.userMessage || 'Starting interview'}}\"\n\nRESUME CONTEXT:\nFile: {{$json.resumeFileName}}\nContent: {{$json.resumeContent}}\n\nJOB DESCRIPTION:\n{{$json.jobDescription || 'General interview - no specific job description provided'}}\n\nCONVERSATION HISTORY:\n{{JSON.stringify($json.conversationHistory || [])}}\n\nTASK:\n{{ $json.step === 'start_interview' ? \n  'Analyze the candidate\\'s resume and job description. Generate an ORIGINAL opening question that connects their experience to the role requirements.' \n  : (\n    ($json.userMessage || '').toLowerCase().includes(\"don't know\") ||\n    ($json.userMessage || '').toLowerCase().includes(\"no idea\") ||\n    ($json.userMessage || '').toLowerCase().includes(\"not sure\")\n    ? 'The candidate is struggling. Acknowledge politely, then ask a different question about another aspect of their resume or experience.'\n    : 'Provide brief feedback on the candidate\\'s previous answer and ask a NEW question based on their resume, experience, or the job requirements.'\n  )\n}}\n\nQUESTION GENERATION RULES:\n1. Base questions on the candidate's actual resume content\n2. Connect questions to the job description when provided\n3. Focus on their listed experience, projects, and skills\n4. Ask about specific technologies, roles, or achievements mentioned in their resume\n5. Include behavioral questions related to their work history\n6. Keep questions relevant to their background and the target role\n\nRESPONSE FORMAT:\n[Brief feedback if continuing] [One ORIGINAL question based on resume/job description]\n\nIMPORTANT:\nAlways generate questions that are personalized to this candidate's background and the role they're interviewing for. Reference specific items from their resume when possible.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        2256,
        1648
      ],
      "id": "d7d9ca1c-c0e9-4d25-bf51-9e956e9cbbb2",
      "name": "ResumeBasedAIAgeny",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO team3_interview_resumes (\n  session_id, resume_filename, resume_content, job_description, uploaded_at\n)\nVALUES (\n  '{{$json.sessionId}}',\n  '{{$json.resumeFileName || \"\"}}',\n  '{{($json.resumeContent || \"\").replace(/'/g, \"''\")}}',\n  '{{($json.jobDescription || \"\").replace(/'/g, \"''\")}}',\n  '{{ new Date().toISOString() }}'\n)",
        "options": {
          "queryReplacement": ""
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2752,
        1360
      ],
      "id": "6725155f-e48d-4d11-8f8a-9f1e75459db4",
      "name": "Postgres Insert Resumes",
      "credentials": {
        "postgres": {
          "id": "cMf2JQOr8aaS2Ru3",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "531a012e-2a93-4ce2-a823-b1c38f8bcc52",
              "leftValue": "={{$json.interviewType === \"resume\"}}",
              "rightValue": "\"resume\"",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2032,
        1824
      ],
      "id": "cb224b86-d117-4987-af39-63e7b3b8f349",
      "name": "checks interviewType"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a professional {{$json.skill}} interviewer conducting a mock interview session.\n\nINTERVIEW SESSION ID: {{$json.sessionId}}\nCANDIDATE: {{$json.name}} ({{$json.level}} level)\nSKILL: {{$json.skill}}\nLEVEL: {{$json.level}}\nQUESTION #: {{$json.questionIndex || 1}}\nPREVIOUS ANSWER: \"{{$json.userMessage || 'Starting interview'}}\"\n\nSKILL-SPECIFIC CONTEXT:\nFocus areas for {{$json.skill}} ({{$json.level}} level):\n{{$json.skillContext}}\n\nTASK:\n{{ $json.step === 'start_interview' ? \n  `Generate and ask an ORIGINAL, TECHNICAL question related to ${$json.skill}, suitable for a ${$json.level} level candidate. Focus on practical understanding.` \n  : (\n    ($json.userMessage || '').toLowerCase().includes(\"don't know\") ||\n    ($json.userMessage || '').toLowerCase().includes(\"no idea\") ||\n    ($json.userMessage || '').toLowerCase().includes(\"not sure\")\n    ? `The candidate is struggling. Acknowledge politely, then create a NEW question from a DIFFERENT focus area in ${$json.skill}, keeping it at the same ${$json.level} level.`\n    : `Provide brief feedback on the candidate’s previous answer and ask a COMPLETELY NEW original ${$json.skill} question from a different focus area appropriate for ${$json.level} level.`\n  )\n}}\n\nQUESTION GENERATION RULES:\n1. Only ask questions relevant to {{$json.skill}}\n2. Match difficulty level: {{$json.level}}\n3. DO NOT ask general programming or unrelated questions\n4. Use original questions — avoid repetition\n5. Keep questions concise, specific, and technically relevant\n6. If the candidate struggles, always change topic/focus area while keeping the same level\n\nRESPONSE FORMAT:\n[Brief feedback if continuing] [One ORIGINAL {{$json.skill}} question at {{$json.level}} level]\n\nQUESTION STYLE GUIDELINES:\n- Mix conceptual, practical, and scenario-based questions  \n- Focus on different aspects of {{$json.skill}} in each question  \n- Use realistic problems and examples  \n- Prioritize real-world applications and decision-making  \n- Vary format: “Explain how…”, “What would you do if…”, “Compare X and Y…”, “How would you solve…”\n\nIMPORTANT:\nAlways generate UNIQUE questions directly related to {{$json.skill}}. Never repeat past questions. Stay within the selected level of difficulty.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        2288,
        1936
      ],
      "id": "06b63245-0550-4b0c-8831-06bb474e3ab7",
      "name": "SkillBasedAIAgent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2256,
        1776
      ],
      "id": "6c0657ec-4059-4d1d-a055-d5cb0dab8f9c",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "KJBaH3Lw8PnGLkH8",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  // ✅ PRESERVE the interviewType that was sent from frontend\n  // The issue is likely here - make sure we don't override the interviewType\n  const interviewType = item.json.interviewType || 'skill'; // Default to 'skill' only if not provided\n\n  // DEBUG: Add these logs to see what's happening\n  console.log('=== DEBUG PROCESS INTERVIEW TYPE NODE ===');\n  console.log('Raw item.json:', JSON.stringify(item.json, null, 2));\n  console.log('Original interviewType from frontend:', item.json.interviewType);\n  console.log('Final interviewType after processing:', interviewType);\n  \n  // ✅ SET THE INTERVIEW TYPE CORRECTLY - don't override if already set\n  item.json.interviewType = interviewType;\n  \n  if (interviewType === 'resume') {\n    // ✅ FOR RESUME INTERVIEWS: Clear skill/level and preserve resume data\n    item.json.skill = null;\n    item.json.level = null;\n    item.json.skillContext = '';\n    item.json.resumeProcessed = true;\n    \n    // ✅ ENSURE resume data is preserved\n    console.log('Resume interview - preserving resume data:');\n    console.log('resumeContent length:', item.json.resumeContent ? item.json.resumeContent.length : 0);\n    console.log('resumeFileName:', item.json.resumeFileName);\n    console.log('jobDescription length:', item.json.jobDescription ? item.json.jobDescription.length : 0);\n    \n    // Make sure resume data is not null/undefined\n    item.json.resumeContent = item.json.resumeContent || '';\n    item.json.resumeFileName = item.json.resumeFileName || '';\n    item.json.jobDescription = item.json.jobDescription || '';\n    \n  } else {\n    // ✅ FOR SKILL INTERVIEWS: Clear resume data and preserve skill/level\n    item.json.resumeContent = null;\n    item.json.resumeFileName = null;\n    item.json.jobDescription = null;\n    item.json.resumeProcessed = false;\n    \n    // Create skill context based on level\n    const level = item.json.level?.toLowerCase() || '';\n    const skill = item.json.skill || 'Unknown Skill';\n    \n    let skillContext = '';\n    if (level === 'beginner') {\n      skillContext = `Basic concepts, syntax fundamentals, simple problem-solving`;\n    } else if (level === 'intermediate') {\n      skillContext = `Design patterns, debugging, code optimization, frameworks`;\n    } else if (level === 'advanced') {\n      skillContext = `System architecture, performance tuning, advanced patterns, leadership`;\n    }\n    \n    item.json.skillContext = skillContext;\n    \n    console.log('Skill interview - preserving skill data:');\n    console.log('skill:', item.json.skill);\n    console.log('level:', item.json.level);\n  }\n  \n  // Parse conversationHistory if it's a string\n  if (typeof item.json.conversationHistory === 'string') {\n    try {\n      item.json.conversationHistory = JSON.parse(item.json.conversationHistory);\n    } catch (e) {\n      item.json.conversationHistory = [];\n    }\n  }\n\n  // Defaults\n  item.json.userMessage = item.json.userMessage || \"Starting interview\";\n  item.json.step = item.json.step || \"follow_up\";\n  item.json.questionIndex = item.json.questionIndex || 1;\n\n  console.log('=== FINAL PROCESSED DATA ===');\n  console.log('interviewType:', item.json.interviewType);\n  console.log('skill:', item.json.skill);\n  console.log('level:', item.json.level);\n  console.log('resumeContent length:', item.json.resumeContent?.length);\n  console.log('resumeFileName:', item.json.resumeFileName);\n\n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1872,
        1568
      ],
      "id": "f8bfb680-6a89-42c1-bac4-9de544e267a0",
      "name": "process interview type"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO team3_interview_users (\n  session_id, name, email, skill, level, password, interview_type, \n  resume_filename, job_description\n)\nVALUES (\n  '{{$json.sessionId}}',\n  '{{$json.name}}',\n  '{{$json.email}}',\n  {{$json.skill ? `'${$json.skill}'` : 'NULL'}},\n  {{$json.level ? `'${$json.level}'` : 'NULL'}},\n  '{{$json.password}}',\n  '{{$json.interviewType || \"skill\"}}',\n  {{$json.resumeFileName ? `'${$json.resumeFileName}'` : 'NULL'}},\n  {{$json.jobDescription ? `'${$json.jobDescription}'` : 'NULL'}}\n)\nON CONFLICT (session_id) DO UPDATE\nSET name = EXCLUDED.name,\n    email = EXCLUDED.email,\n    skill = EXCLUDED.skill,\n    level = EXCLUDED.level,\n    password = EXCLUDED.password,\n    interview_type = EXCLUDED.interview_type,\n    resume_filename = EXCLUDED.resume_filename,\n    job_description = EXCLUDED.job_description;",
        "options": {
          "queryReplacement": ""
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1776,
        1184
      ],
      "id": "09c96adc-abc9-407f-97b9-01df0bd882dd",
      "name": "save user info",
      "credentials": {
        "postgres": {
          "id": "cMf2JQOr8aaS2Ru3",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO team3_interview_logs (\n  timestamp, session_id, question_asked, user_response, question_index\n)\nVALUES (\n  '{{ new Date().toISOString() }}',\n  '{{ $json.sessionId }}',\n  '{{ ($json.conversationHistory[-1].message || \"\").replace(/'/g, \"''\") }}',\n  '{{ ($json.userMessage || \"\").replace(/'/g, \"''\") }}',\n  {{ parseInt($json.questionIndex) || 1 }}\n)\nON CONFLICT (session_id, question_index)\nDO UPDATE SET\n  timestamp = EXCLUDED.timestamp,\n  question_asked = EXCLUDED.question_asked,\n  user_response = EXCLUDED.user_response;\n",
        "options": {
          "queryReplacement": ""
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2208,
        1120
      ],
      "id": "6a5fb964-7134-439e-a88b-864b138a5821",
      "name": "save user responses",
      "credentials": {
        "postgres": {
          "id": "cMf2JQOr8aaS2Ru3",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO team3_interview_logs (\n  timestamp, session_id, question_asked, user_response, question_index\n)\nVALUES (\n  '{{ new Date().toISOString() }}',\n  '{{ $json.sessionId }}',\n  '{{ ($json.cleanOutput || \"\").replace(/'/g, \"''\") }}',\n  '{{ ($json.userMessage || \"\").replace(/'/g, \"''\") }}',\n  {{ parseInt($json.questionIndex) || 1 }}\n)\nON CONFLICT (session_id, question_index)\nDO UPDATE SET\n  timestamp = EXCLUDED.timestamp,\n  question_asked = EXCLUDED.question_asked,\n  user_response = EXCLUDED.user_response;\n",
        "options": {
          "queryReplacement": ""
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3280,
        1312
      ],
      "id": "4c84ef3f-4a0b-4a37-898f-f3ee01d38485",
      "name": "save interview logs",
      "credentials": {
        "postgres": {
          "id": "cMf2JQOr8aaS2Ru3",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2576,
        1488
      ],
      "id": "d2cb531f-f840-499e-a173-67cfa2b9f7e2",
      "name": "Merge"
    }
  ],
  "pinData": {
    "Webhook1": [
      {
        "json": {
          "headers": {
            "host": "interviewainumpy.app.n8n.cloud",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
            "content-length": "80138",
            "accept": "application/json",
            "accept-encoding": "gzip, br",
            "accept-language": "en-US,en;q=0.9",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "cf-connecting-ip": "96.242.29.142",
            "cf-ew-via": "15",
            "cf-ipcountry": "US",
            "cf-ray": "96c34cbe82cb4231-EWR",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-worker": "n8n.cloud",
            "content-type": "application/json",
            "origin": "https://mathumathi0989.github.io",
            "priority": "u=1, i",
            "referer": "https://mathumathi0989.github.io/",
            "sec-ch-ua": "\"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"138\", \"Google Chrome\";v=\"138\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"macOS\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            "x-forwarded-for": "96.242.29.142, 162.158.158.133",
            "x-forwarded-host": "interviewainumpy.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "traefik-prod-users-gwc-51-795c6dc87-g2pl4",
            "x-is-trusted": "yes",
            "x-real-ip": "96.242.29.142"
          },
          "params": {},
          "query": {},
          "body": {
            "sessionId": "session-c630efc2628655ca",
            "name": "teead reaed",
            "email": "tree1@gmail.com",
            "userMessage": "i have 8 years of QA experience",
            "questionIndex": 2,
            "totalQuestionsAsked": 1,
            "conversationHistory": "[{\"role\":\"assistant\",\"message\":\"Welcome, teead reaed. Let's begin.\\n\\nTo start, please walk me through your resume and tell me a bit about your professional background and experience.\"},{\"role\":\"user\",\"message\":\"i have 8 years of QA experience\"}]",
            "interviewType": "resume",
            "step": "ongoing_interview",
            "remainingTime": 155,
            "password": "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
            "resumeContent": "data:application/pdf;base64,",
            "jobDescription": null,
            "resumeFileName": "quality-assurance-tester2 - Template 18.pdf",
            "skill": null,
            "level": null
          },
          "webhookUrl": "https://interviewainumpy.app.n8n.cloud/webhook/00039b72-9338-4ecd-8516-71a22a1be431",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook1": {
      "main": [
        [
          {
            "node": "Set Inputs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Inputs1": {
      "main": [
        [
          {
            "node": "Update Counters1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "SkillBasedAIAgent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Extract First Response1": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean AI Output1": {
      "main": [
        [
          {
            "node": "Extract First Response1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Update Counters1": {
      "main": [
        [
          {
            "node": "save user info",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          },
          {
            "node": "process interview type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "save interview logs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check User Response1": {
      "main": [
        [
          {
            "node": "save user responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "checks interviewType": {
      "main": [
        [
          {
            "node": "ResumeBasedAIAgeny",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "SkillBasedAIAgent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SkillBasedAIAgent": {
      "main": [
        [
          {
            "node": "Clean AI Output1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ResumeBasedAIAgeny": {
      "main": [
        [
          {
            "node": "Clean AI Output1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "ResumeBasedAIAgeny",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "process interview type": {
      "main": [
        [
          {
            "node": "Check User Response1",
            "type": "main",
            "index": 0
          },
          {
            "node": "checks interviewType",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Postgres Insert Resumes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ca9e41cc-1b74-4492-9601-d2f277dcedab",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c82967bae5ce611e728e5e4bcea606764e9049a76de6a7a46d598ed3e58067d5"
  },
  "id": "U3o7lZSygh9X2uDq",
  "tags": []
}