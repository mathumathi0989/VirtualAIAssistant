{
  "name": "JD_FinalAIWorkflowCopy",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=User said: {{ $json.body.message }}\n\n\nPlease respond with a relevant interview question based on the conversation context {{ $json.body.sessionId }} and the candidate's resume.\n Use the resume_agent tool if you need specific information about their background.\n\nIMPORTANT: Never finalize the interview until user explicitly types \"END\".",
        "options": {
          "systemMessage": "=You are a professional technical interviewer. Your role is to conduct a structured and interactive interview using only the candidate’s resume and the job description provided.\n\nInterview Behavior\n\nAsk only one question at a time.\n\nAfter the candidate responds, decide whether to:\n\nAsk a follow-up question (if the answer was correct and you can go deeper), or\n\nAsk a different question from the same topic (if the answer was wrong), or\n\nMove to a new topic (after three attempts on the same topic).\n\nNever combine multiple questions in a single turn.\n\nKeep the tone professional, supportive, and interactive. Encourage the candidate positively, even if they struggle.\n\nMake the interview feel realistic, but ensure the total duration does not exceed 15 minutes.\n\nQuestioning Strategy\n\nTopic selection: Choose topics only from the resume that match the job description.\n\nQuestion depth:\n\nStart with a basic question on the topic.\n\nAsk up to 2 follow-ups if the candidate answers correctly.\n\nIf the first question is answered incorrectly, retry with a different question (max 3 attempts per topic).\n\nThen switch to another topic.\n\nCoverage: Assess a mix of technical knowledge, problem-solving, behavioral skills, and communication.\n\nInterview Flow\n\nBegin with a question referencing a specific project or skill from the resume aligned to the job description.\n\nContinue by asking exactly one focused question per turn.\n\nNever repeat the same question within a 3-month window for the same candidate.\n\nEnd the interview only when the candidate types \"END\".\n\nPost-Interview Feedback (after END)\n\nStart feedback with INTERVIEW_COMPLETE: and provide:\n\nSummary of overall performance\n\nKey strengths (with examples)\n\nAreas to improve (with actionable advice)\n\nOverall score (1–10)\n\nEncouragement and next steps\n\nCritical Rules\n\nNever ask generic questions like “Tell me about yourself.”\n\nAlways reference the resume and job description.\n\nUse the resume_agent tool at the start with \"resume overview\".\n\nOne question per turn, no exceptions."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        816,
        512
      ],
      "id": "7229585a-9771-4224-a584-a6f3089c3963",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        640,
        768
      ],
      "id": "622bded2-c819-49cc-ae3b-0ed9d13ce809",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "XpWhqTGNv6uXGtld",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.body.sessionId || $('Extract Session Data').item.json.sessionId }}",
        "tableName": "mathu_n8n_chat_histories"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        848,
        816
      ],
      "id": "64ab4c61-a07e-4437-a013-c7c3ac969276",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "nZ41rGQPdopybjxo",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Use this to retrieve information about the candidate's resume including their experience, skills, projects, education, and background. Call this tool when you need specific details about the candidate to ask relevant questions.",
        "tableName": {
          "__rl": true,
          "value": "documents_updated",
          "mode": "list",
          "cachedResultName": "documents_updated"
        },
        "topK": 10,
        "options": {
          "queryName": "match_documents_upo",
          "metadata": {
            "metadataValues": [
              {
                "name": "session_id",
                "value": "={{$json.body.sessionId}}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        1088,
        752
      ],
      "id": "8ab13bde-24e9-4aa6-97d7-8fca6fb48aed",
      "name": "Supabase Vector Store1",
      "credentials": {
        "supabaseApi": {
          "id": "brIiXKjDsVpruT0l",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        1024,
        912
      ],
      "id": "9645b1a0-4fb2-422f-a3e3-19ff53b3e26c",
      "name": "Embeddings Google Gemini1",
      "credentials": {
        "googlePalmApi": {
          "id": "XpWhqTGNv6uXGtld",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents_updated",
          "mode": "list",
          "cachedResultName": "documents_updated"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        1072,
        -32
      ],
      "id": "341a6c56-d169-456c-aaee-1367b955254d",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "brIiXKjDsVpruT0l",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        1168,
        176
      ],
      "id": "15601a6f-97f5-479f-bc4e-82ee7d4b4364",
      "name": "Embeddings Google Gemini",
      "credentials": {
        "googlePalmApi": {
          "id": "XpWhqTGNv6uXGtld",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "textSplittingMode": "custom",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "file_id",
                "value": "={{$('Extract Session Data').item.json.sessionId}}_{{Date.now()}}"
              },
              {
                "name": "version",
                "value": "=1"
              },
              {
                "name": "file_type",
                "value": "={{$('Extract Session Data').item.json.resumeMimeType}}"
              },
              {
                "name": "modified",
                "value": "={{new Date().toISOString()}}"
              },
              {
                "name": "session_id",
                "value": "={{$('Extract Session Data').item.json.sessionId}}"
              },
              {
                "name": "job_description",
                "value": "={{$('Extract Session Data').item.json.jobDescription || ''}}"
              },
              {
                "name": "document_type",
                "value": "resume"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        1296,
        144
      ],
      "id": "bc0e8425-e713-43da-aa4a-cbd229c10dec",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "resume",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        688,
        16
      ],
      "id": "c469d8a9-b429-4a38-a161-1edfaef7e1fe",
      "name": "Extract from File"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        1344,
        272
      ],
      "id": "7ffb35d3-545c-47ca-af27-a683ea99c641",
      "name": "Character Text Splitter"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"status\": \"success\",\n  \"message\": \"Resume processed successfully! Let's start your interview.\",\n  \"question\": \"Hello! I've analyzed your resume. Let's begin with a simple question: Tell me about yourself and your background.\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1936,
        -80
      ],
      "id": "a1947830-efdb-4c35-8716-67ed7cb4f26a",
      "name": "Respond to Upload"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response\": {{$json.response.toJsonString()}},\n  \"status\": {{$json.status.toJsonString()}}\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1904,
        800
      ],
      "id": "9616c2bc-5cc9-4f07-8b04-fcc4d63a6278",
      "name": "Respond to Chat"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b4a80045-ffb0-4b6c-ab37-92b61461ef3c",
              "name": "sessionId",
              "value": "={{$json.body.sessionId}}",
              "type": "string"
            },
            {
              "id": "a9431b2a-55e1-45f4-aebe-692899d44a57",
              "name": "jobDescription",
              "value": "={{$json.body.jobDescription}}",
              "type": "string"
            },
            {
              "id": "054236f1-2837-481b-b443-9cf5622f2d15",
              "name": "resumeData",
              "value": "={{$json.body.resumeData}}",
              "type": "string"
            },
            {
              "id": "245d4185-5dc2-4a1d-a869-a3462bd18f33",
              "name": "resumeFileName",
              "value": "={{$json.body.resumeFileName}}",
              "type": "string"
            },
            {
              "id": "36d281e1-39d8-40d1-bb80-56a76e804d72",
              "name": "resumeMimeType",
              "value": "={{$json.body.resumeMimeType}}",
              "type": "string"
            },
            {
              "id": "558f06ee-13e9-43f6-a864-da3e5a3ed963",
              "name": "resumeFileSize",
              "value": "={{$json.body.resumeFileSize}}",
              "type": "string"
            },
            {
              "id": "6b2d88da-bb17-43e8-91cc-b9838e6e4882",
              "name": "candidateEmail",
              "value": "={{$json.body.candidateEmail}}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        32,
        64
      ],
      "id": "7793bef9-f3e5-4c97-aa1b-874a73482df1",
      "name": "Extract Session Data"
    },
    {
      "parameters": {
        "jsCode": "// Check if we have base64 resume data\nconst resumeData = $input.item.json.resumeData;\n\nconsole.log(\"Checking for resumeData:\", !!resumeData);\nconsole.log(\"ResumeData type:\", typeof resumeData);\n\nif (resumeData && resumeData.length > 0) {\n  console.log(\"Resume data length:\", resumeData.length);\n  \n  try {\n    // Convert base64 string to buffer\n    const buffer = Buffer.from(resumeData, 'base64');\n    console.log(\"Buffer created, size:\", buffer.length);\n    \n    // Return the item with binary data attached\n    return {\n      json: {\n        ...$input.item.json,\n        debug_buffer_size: buffer.length,\n        debug_has_binary: true\n      },\n      binary: {\n        resume: {\n          data: buffer,\n          mimeType: $input.item.json.resumeMimeType || 'application/pdf',\n          fileName: $input.item.json.resumeFileName || 'resume.pdf',\n          fileExtension: 'pdf'\n        }\n      }\n    };\n  } catch (error) {\n    console.log(\"Buffer creation error:\", error.message);\n    return {\n      json: {\n        ...$input.item.json,\n        debug_error: error.message,\n        debug_failed_conversion: true\n      }\n    };\n  }\n} else {\n  console.log(\"No resume data found or empty\");\n  console.log(\"Available keys:\", Object.keys($input.item.json));\n  return {\n    json: {\n      ...$input.item.json,\n      debug_no_resume_data: true,\n      debug_available_keys: Object.keys($input.item.json)\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        0
      ],
      "id": "b1e065a9-0764-4d7a-a0f4-be1638974034",
      "name": "Convert Base64 to Binary"
    },
    {
      "parameters": {
        "jsCode": "// Get first input safely\nconst firstInput = $input.first() || { json: {} };\n\n// Try multiple possible fields where AI output might be stored\nlet aiOutput = firstInput.json.response\n            || firstInput.json.output\n            || firstInput.json.text\n            || firstInput.json.content\n            || firstInput.json.message\n            || firstInput.json.result \n            || \"\";\n\n// Fallback\nif (!aiOutput || (typeof aiOutput === \"string\" && aiOutput.trim() === \"\")) {\n  aiOutput = \"I'm sorry, I couldn't generate a response. Could you please try again?\";\n}\n\n// Ensure it's a string\nif (typeof aiOutput !== \"string\") {\n  aiOutput = String(aiOutput);\n}\n\n// ✅ Do NOT escape quotes/backslashes manually — let JSON.stringify handle it\nreturn [{\n  json: {\n    response: aiOutput,\n    status: \"success\"\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1600,
        832
      ],
      "id": "a0557623-e117-4e99-96c5-9ee03d534f9c",
      "name": "Format Response"
    },
    {
      "parameters": {
        "jsCode": "const sessionId = $('Extract Session Data').item.json.sessionId;\nconsole.log('Processing resume for session:', sessionId);\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        896,
        16
      ],
      "id": "0b767785-bf9f-49a6-9fbe-e1016377e7bf",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5d43db59-87d7-4507-9b50-1ea28f91bb63",
              "leftValue": "=={{ $json.response || $json.output || $json.text || '' }}",
              "rightValue": "INTERVIEW_COMPLETE:",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "efca5d01-d570-4603-acff-9d239823e3fc",
              "leftValue": "={{ ($('Interview Chat').item.json.body.message || '').toString().trim().toUpperCase() }}",
              "rightValue": "END",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1168,
        512
      ],
      "id": "c7d674fc-42ff-4117-b800-7368e3b06e58",
      "name": "If",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bda27770-de0f-4e86-aee3-a24029d3cf5a",
              "name": "=feedbackContent",
              "value": "={{ ($json.response || $json.output || 'Thank you for completing the technical interview. Your feedback has been generated based on our conversation.').replace('INTERVIEW_COMPLETE:', '').trim() }}",
              "type": "string"
            },
            {
              "id": "3cc39c3b-a0da-496a-945b-40c9f92dc753",
              "name": "candidateEmail",
              "value": "={{ $('Interview Chat').item.json.body.candidateEmail }}",
              "type": "string"
            },
            {
              "id": "a9125da0-740d-49e6-a552-58dd881fd5d4",
              "name": "sessionId",
              "value": "={{ $('Interview Chat').item.json.body.sessionId }}",
              "type": "string"
            },
            {
              "id": "26088f08-d6ec-4289-8951-43238f7417d9",
              "name": "candidateName",
              "value": "=Candidate",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1456,
        416
      ],
      "id": "19e6f3da-6773-4662-84a7-d94095bff818",
      "name": "Prepare Email Data"
    },
    {
      "parameters": {
        "sendTo": "={{ $json.candidateEmail }}",
        "subject": "=Technical Interview Feedback - {{ new Date().toLocaleDateString() }}",
        "message": "=<div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">     <div style=\"background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%); color: white; padding: 20px; border-radius: 10px 10px 0 0;\">         <h2 style=\"margin: 0;\">🎯 Technical Interview Feedback</h2>         <p style=\"margin: 10px 0 0 0;\">Session ID: {{ $json.sessionId }}</p>     </div>          <div style=\"background: #f9fafb; padding: 20px; border-radius: 0 0 10px 10px; border: 1px solid #e5e7eb;\">         <div style=\"background: white; padding: 20px; border-radius: 8px; white-space: pre-line; line-height: 1.6;\">             {{ $json.feedbackContent }}         </div>                  <div style=\"margin-top: 20px; padding: 15px; background: #e0f2fe; border-radius: 8px; border-left: 4px solid #0ea5e9;\">             <p style=\"margin: 0; color: #0369a1;\">                 <strong>Next Steps:</strong><br>                 • Review the feedback points above<br>                 • Practice the suggested areas for improvement<br>                 • Keep preparing for your target role<br>                 • You've got this! 💪             </p>         </div>                  <div style=\"margin-top: 20px; text-align: center; color: #6b7280; font-size: 14px;\">             <p>Thank you for using our AI Technical Interview platform!</p>         </div>     </div> </div>",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1616,
        464
      ],
      "id": "f2555d2d-5c18-4429-83d6-b50be65a4077",
      "name": "Send a message",
      "webhookId": "e3919e74-5c8c-43d5-80e2-831a12c28a91",
      "credentials": {
        "gmailOAuth2": {
          "id": "mozpalkP4btBi02P",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "edc2a743-ee9c-4f16-9ec1-dacae8f99d39",
              "name": "response",
              "value": "=✅ Thanks for completing the interview! We’ve sent feedback to your email.",
              "type": "string"
            },
            {
              "id": "c184b0c6-eb5a-461b-a249-834e53eae535",
              "name": "status",
              "value": "=success",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1824,
        464
      ],
      "id": "322c0f36-1cf1-485f-8c04-d2c355f94537",
      "name": "Final Response"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/upload-resume",
        "responseMode": "responseNode",
        "options": {
          "binaryPropertyName": "resume"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -160,
        64
      ],
      "id": "d2cb3437-c487-4907-b10a-14790b9a861e",
      "name": "Upload Resume",
      "webhookId": "5fbb3086-065d-41e9-ab5d-b5f339d352c0"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/interview-chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        448,
        512
      ],
      "id": "7e53c7ef-96c9-4eee-8787-1993eb6e4bec",
      "name": "Interview Chat",
      "webhookId": "145d8cac-21cc-4221-bff8-995d8b806fdf"
    },
    {
      "parameters": {
        "jsCode": "// Check if job description exists\nconst jobDescription = $input.item.json.jobDescription;\n\nif (jobDescription && jobDescription.trim().length > 0) {\n  console.log(\"Job description found, length:\", jobDescription.length);\n  \n  return [{\n    json: {\n      ...$input.item.json,\n      hasJobDescription: true,\n      jobDescriptionContent: jobDescription.trim()\n    }\n  }];\n} else {\n  console.log(\"No job description provided\");\n  \n  return [{\n    json: {\n      ...$input.item.json,\n      hasJobDescription: false,\n      jobDescriptionContent: \"\"\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        16
      ],
      "id": "84b9bf4f-6d85-4edf-b0db-f5cf414c75eb",
      "name": "Prepare Job Description Document"
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents_updated",
          "mode": "list",
          "cachedResultName": "documents_updated"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        1584,
        -32
      ],
      "id": "81f8416e-8e5f-47c3-8c18-d47ac1afaa8f",
      "name": "Supabase Vector Store2",
      "credentials": {
        "supabaseApi": {
          "id": "brIiXKjDsVpruT0l",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "textSplittingMode": "custom",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "file_id",
                "value": "={{$json.sessionId}}_job_description"
              },
              {
                "name": "session_id",
                "value": "={{$json.sessionId}}"
              },
              {
                "name": "document_type",
                "value": "job_description"
              },
              {
                "name": "created_at",
                "value": "={{new Date().toISOString()}}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        1808,
        128
      ],
      "id": "d1c7fdcc-0be6-4b65-9717-44f6f04d9b2a",
      "name": "Default Data Loader1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        1648,
        160
      ],
      "id": "b5b951c1-0164-4a9d-be4f-fade5aed7e03",
      "name": "Embeddings Google Gemini2",
      "credentials": {
        "googlePalmApi": {
          "id": "XpWhqTGNv6uXGtld",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const sessionData = $input.first().json;\nconst jobDescription = sessionData.jobDescription || '';\nconst sessionId = sessionData.sessionId;\n\n// ALWAYS return something, even if no job description\nif (jobDescription && jobDescription.trim().length > 0) {\n  return [{\n    json: {\n      content: `Job Description:\\n\\n${jobDescription.trim()}`,\n      sessionId: sessionId,\n      documentType: 'job_description'\n    }\n  }];\n} else {\n  // Instead of returning empty array, return a dummy item to keep flow going\n  return [{\n    json: {\n      content: 'No job description provided',\n      sessionId: sessionId,\n      documentType: 'placeholder',\n      skip: true\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1424,
        -32
      ],
      "id": "c34f2891-61c7-47b7-8446-d5788ed41c5e",
      "name": "Create Job Description Document",
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        1904,
        336
      ],
      "id": "9bf688f1-b340-46a1-9193-7ece988820a8",
      "name": "Character Text Splitter1"
    }
  ],
  "pinData": {
    "Interview Chat": [
      {
        "json": {
          "headers": {
            "host": "skateruai.app.n8n.cloud",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
            "content-length": "112",
            "accept": "application/json",
            "accept-encoding": "gzip, br",
            "accept-language": "en-US,en;q=0.9",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "cf-connecting-ip": "96.242.29.142",
            "cf-ew-via": "15",
            "cf-ipcountry": "US",
            "cf-ray": "97da393d57b8422d-EWR",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-worker": "n8n.cloud",
            "content-type": "application/json",
            "origin": "https://mathumathi0989.github.io",
            "priority": "u=1, i",
            "referer": "https://mathumathi0989.github.io/",
            "sec-ch-ua": "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"macOS\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            "x-forwarded-for": "96.242.29.142, 162.158.158.198",
            "x-forwarded-host": "skateruai.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "traefik-prod-users-gwc-44-68df68bcf-27vmg",
            "x-is-trusted": "yes",
            "x-real-ip": "96.242.29.142"
          },
          "params": {},
          "query": {},
          "body": {
            "message": "end",
            "sessionId": "tech_interview_1757624891313_a8mrxod2l",
            "candidateEmail": "mathumathi.b@gmail.com"
          },
          "webhookUrl": "https://skateruai.app.n8n.cloud/webhook/interview-chat",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "main": [
        [
          {
            "node": "Create Job Description Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Session Data": {
      "main": [
        [
          {
            "node": "Prepare Job Description Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Base64 to Binary": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Respond to Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Prepare Email Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Email Data": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final Response": {
      "main": [
        [
          {
            "node": "Respond to Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Resume": {
      "main": [
        [
          {
            "node": "Extract Session Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interview Chat": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Job Description Document": {
      "main": [
        [
          {
            "node": "Convert Base64 to Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader1": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store2",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini2": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store2": {
      "main": [
        [
          {
            "node": "Respond to Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Job Description Document": {
      "main": [
        [
          {
            "node": "Supabase Vector Store2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter1": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader1",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "04f53d27-61dd-493b-9516-d086aa58454b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "71de14421385159897fc69f82097328e81facffe4bfdac3121fd734bfc63f804"
  },
  "id": "RfWjxXXse7DQfVCH",
  "tags": []
}