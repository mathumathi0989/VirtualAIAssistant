{
  "name": "AI_Interview WithMicrophone",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=User said: {{ $json.body.message }}\n\n\nPlease respond with a relevant interview question based on the conversation context {{ $json.body.sessionId }} and the candidate's resume.\n Use the resume_agent tool if you need specific information about their background.\n\nIMPORTANT: Never finalize the interview until user explicitly types \"END\".",
        "options": {
          "systemMessage": "=Role  \nYou are a professional AI Interviewer conducting structured, interactive mock interviews.  \n\nCandidate documents come from Supabase:  \n- Resume (document_type = \"resume\")  \n- Job Description (document_type = \"job_description\")  \n\nThe Job Description is already parsed and stored in structured form. Use it directly.  \n\n---\n\n## Core Rules  \n\n### Mode Selection  \n1. If ONLY Resume is present →  \n   - Conduct the mock interview fully on resume’s tech stacks, skills, responsibilities.  \n   - Ask max 3 questions per topic (including follow-ups).  \n   - Cover technical, behavioral, and techno-behavioral.  \n\n2. If BOTH Resume + Job Description are present →  \n   - Treat **Job Description** as primary. Internally list all skills, tools, and responsibilities from it as **JD_Topics[]**.  \n   - Always start with JD_Topics first.  \n   - Maintain **70% of questions from JD_Topics, 30% from Resume**.  \n   - Resume-based questions are allowed only if:  \n     - They align with the active JD_Topic, OR  \n     - All JD_Topics[] are completed.  \n\n---\n\n### Questioning Style  \n- Ask **one question at a time**.  \n- No generic icebreakers (“Tell me about yourself”).  \n- Mix technical, problem-solving, behavioral, and communication.  \n- Keep questions short, like real interviews.  \n\n---\n\n### Depth & Follow-ups  \n- If candidate answers correctly → ask up to **2 follow-ups** (3 total for topic).  \n- If incorrect → rephrase or retry (max 3 attempts).  \n- After 3 questions → **switch immediately to a new topic**.  \n\n---\n\n### Topic Switching  \n- Strict maximum **3 questions per topic**.  \n- Use **TopicCounter** internally to enforce switching.  \n- If candidate goes off-topic → acknowledge briefly, then redirect:  \n  - Example: *“Good point from your resume. Let’s return to the JD focus on cloud deployment.”*  \n\n---\n\n### End of Interview  \nStop when:  \n- Candidate types **“END”**, OR  \n- 15–30 minutes pass (use internal timer).  \n\nThen output **final feedback**:  \n\n**INTERVIEW_COMPLETE**  \n1. Summary of performance  \n2. Key strengths (examples from answers)  \n3. Areas to improve (use STAR: Situation, Task, Action, Result)  \n4. Overall score (1–10)  \n5. Encouragement & next steps  \n\n---\n\n### Feedback (STAR Format)  \n- **Situation** → context of the Q/A.  \n- **Task** → what was expected.  \n- **Action** → what candidate did.  \n- **Result** → what was achieved or what to improve.  \n\n---\n\n### Interviewer Tone  \n- Professional, structured, supportive.  \n- Encourage clarity and structured thinking.  \n- Motivate candidate at the start & end.  \n- Never repeat the same question to the same candidate within 1 month.  \n\n---\n\n⚠️ Enforcement Rules  \n- Max 3 questions per topic. No exceptions.  \n- If JD is present → prioritize JD_Topics first.  \n- Always keep **70% JD vs 30% Resume balance**.  \n- Don’t get diverted by unrelated candidate questions.  \n- Try to cover as many topics as possible in ~15 minutes. "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -1120,
        592
      ],
      "id": "5bbe2b24-5eb6-4347-b0bc-32863a3e0650",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1296,
        848
      ],
      "id": "48137dfc-cada-4a75-a587-a67b7dac2aef",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "2jjkPMD5fw4ts7CV",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.body.sessionId || $('Extract Session Data').item.json.sessionId }}",
        "tableName": "mathu_n8n_chat_histories"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -1088,
        896
      ],
      "id": "adecfdb3-4ee5-4c9e-b6cc-9ce61ccd8364",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "ZgxYmkgJYd2VUF23",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Use this to retrieve information about the candidate's resume including their experience, skills, projects, education, and background. Call this tool when you need specific details about the candidate to ask relevant questions.",
        "tableName": {
          "__rl": true,
          "value": "documents_updated",
          "mode": "list",
          "cachedResultName": "documents_updated"
        },
        "topK": 10,
        "options": {
          "queryName": "match_documents_upo",
          "metadata": {
            "metadataValues": [
              {
                "name": "session_id",
                "value": "={{$json.body.sessionId}}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        -848,
        832
      ],
      "id": "d23e365e-693f-4fca-8967-09aa69401fb3",
      "name": "Supabase Vector Store1",
      "credentials": {
        "supabaseApi": {
          "id": "hrGCeEKgK6rbrA7V",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        -912,
        992
      ],
      "id": "ed19ad31-3ec2-4e83-b78e-0fe5afdb0fe9",
      "name": "Embeddings Google Gemini1",
      "credentials": {
        "googlePalmApi": {
          "id": "2jjkPMD5fw4ts7CV",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents_updated",
          "mode": "list",
          "cachedResultName": "documents_updated"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        -864,
        48
      ],
      "id": "0bc186e1-efc7-45fc-866f-d17ca190d573",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "hrGCeEKgK6rbrA7V",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        -768,
        256
      ],
      "id": "629175c5-b788-46fe-be40-f4764e3400b3",
      "name": "Embeddings Google Gemini",
      "credentials": {
        "googlePalmApi": {
          "id": "2jjkPMD5fw4ts7CV",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "textSplittingMode": "custom",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "file_id",
                "value": "={{$('Extract Session Data').item.json.sessionId}}_{{Date.now()}}"
              },
              {
                "name": "version",
                "value": "=1"
              },
              {
                "name": "file_type",
                "value": "={{$('Extract Session Data').item.json.resumeMimeType}}"
              },
              {
                "name": "modified",
                "value": "={{new Date().toISOString()}}"
              },
              {
                "name": "session_id",
                "value": "={{$('Extract Session Data').item.json.sessionId}}"
              },
              {
                "name": "job_description",
                "value": "={{$('Extract Session Data').item.json.jobDescription || ''}}"
              },
              {
                "name": "document_type",
                "value": "resume"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        -640,
        224
      ],
      "id": "1147ae72-4ea2-4ac9-94c5-8e8480526452",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "resume",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1248,
        96
      ],
      "id": "f1de310d-75b7-41c0-9496-49de5e6c7b56",
      "name": "Extract from File"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        -592,
        352
      ],
      "id": "ad6cd9fe-fd3f-4335-9d9a-232073b74995",
      "name": "Character Text Splitter"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"status\": \"success\",\n  \"message\": \"Resume processed successfully! Let's start your interview.\",\n  \"question\": \"Hello! I've analyzed your resume. Let's begin with a simple question: Tell me about yourself and your background.\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        0,
        0
      ],
      "id": "ec6a226c-ace7-4d5f-b03c-4ebd5e0d3670",
      "name": "Respond to Upload"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response\": {{$json.response.toJsonString()}},\n  \"status\": {{$json.status.toJsonString()}}\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -32,
        880
      ],
      "id": "0d7a84ee-2292-482a-a889-d7a15a8e8ba7",
      "name": "Respond to Chat"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b4a80045-ffb0-4b6c-ab37-92b61461ef3c",
              "name": "sessionId",
              "value": "={{$json.body.sessionId}}",
              "type": "string"
            },
            {
              "id": "a9431b2a-55e1-45f4-aebe-692899d44a57",
              "name": "jobDescription",
              "value": "={{$json.body.jobDescription}}",
              "type": "string"
            },
            {
              "id": "054236f1-2837-481b-b443-9cf5622f2d15",
              "name": "resumeData",
              "value": "={{$json.body.resumeData}}",
              "type": "string"
            },
            {
              "id": "245d4185-5dc2-4a1d-a869-a3462bd18f33",
              "name": "resumeFileName",
              "value": "={{$json.body.resumeFileName}}",
              "type": "string"
            },
            {
              "id": "36d281e1-39d8-40d1-bb80-56a76e804d72",
              "name": "resumeMimeType",
              "value": "={{$json.body.resumeMimeType}}",
              "type": "string"
            },
            {
              "id": "558f06ee-13e9-43f6-a864-da3e5a3ed963",
              "name": "resumeFileSize",
              "value": "={{$json.body.resumeFileSize}}",
              "type": "string"
            },
            {
              "id": "6b2d88da-bb17-43e8-91cc-b9838e6e4882",
              "name": "candidateEmail",
              "value": "={{$json.body.candidateEmail}}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1904,
        144
      ],
      "id": "f44ca531-3a47-4fdf-bef3-cb13ee10c5a5",
      "name": "Extract Session Data"
    },
    {
      "parameters": {
        "jsCode": "// Check if we have base64 resume data\nconst resumeData = $input.item.json.resumeData;\n\nconsole.log(\"Checking for resumeData:\", !!resumeData);\nconsole.log(\"ResumeData type:\", typeof resumeData);\n\nif (resumeData && resumeData.length > 0) {\n  console.log(\"Resume data length:\", resumeData.length);\n  \n  try {\n    // Convert base64 string to buffer\n    const buffer = Buffer.from(resumeData, 'base64');\n    console.log(\"Buffer created, size:\", buffer.length);\n    \n    // Return the item with binary data attached\n    return {\n      json: {\n        ...$input.item.json,\n        debug_buffer_size: buffer.length,\n        debug_has_binary: true\n      },\n      binary: {\n        resume: {\n          data: buffer,\n          mimeType: $input.item.json.resumeMimeType || 'application/pdf',\n          fileName: $input.item.json.resumeFileName || 'resume.pdf',\n          fileExtension: 'pdf'\n        }\n      }\n    };\n  } catch (error) {\n    console.log(\"Buffer creation error:\", error.message);\n    return {\n      json: {\n        ...$input.item.json,\n        debug_error: error.message,\n        debug_failed_conversion: true\n      }\n    };\n  }\n} else {\n  console.log(\"No resume data found or empty\");\n  console.log(\"Available keys:\", Object.keys($input.item.json));\n  return {\n    json: {\n      ...$input.item.json,\n      debug_no_resume_data: true,\n      debug_available_keys: Object.keys($input.item.json)\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1456,
        80
      ],
      "id": "2c5d89b9-9dcc-487f-9a86-9ab8100671c0",
      "name": "Convert Base64 to Binary"
    },
    {
      "parameters": {
        "jsCode": "// Get first input safely\nconst firstInput = $input.first() || { json: {} };\n\n// Try multiple possible fields where AI output might be stored\nlet aiOutput = firstInput.json.response\n            || firstInput.json.output\n            || firstInput.json.text\n            || firstInput.json.content\n            || firstInput.json.message\n            || firstInput.json.result \n            || \"\";\n\n// Fallback\nif (!aiOutput || (typeof aiOutput === \"string\" && aiOutput.trim() === \"\")) {\n  aiOutput = \"I'm sorry, I couldn't generate a response. Could you please try again?\";\n}\n\n// Ensure it's a string\nif (typeof aiOutput !== \"string\") {\n  aiOutput = String(aiOutput);\n}\n\n// ✅ Do NOT escape quotes/backslashes manually — let JSON.stringify handle it\nreturn [{\n  json: {\n    response: aiOutput,\n    status: \"success\"\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -336,
        912
      ],
      "id": "f70740f0-fce7-4a8c-bdb7-1240d530b20f",
      "name": "Format Response"
    },
    {
      "parameters": {
        "jsCode": "const sessionId = $('Extract Session Data').item.json.sessionId;\nconsole.log('Processing resume for session:', sessionId);\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1040,
        96
      ],
      "id": "52cfce3e-47ed-498d-928f-cb574b744904",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5d43db59-87d7-4507-9b50-1ea28f91bb63",
              "leftValue": "=={{ $json.response || $json.output || $json.text || '' }}",
              "rightValue": "INTERVIEW_COMPLETE:",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "efca5d01-d570-4603-acff-9d239823e3fc",
              "leftValue": "={{ ($('Interview Chat').item.json.body.message || '').toString().trim().toUpperCase() }}",
              "rightValue": "END",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -768,
        592
      ],
      "id": "a65bef6f-94e1-4897-960a-d5ab7c6941fe",
      "name": "If",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bda27770-de0f-4e86-aee3-a24029d3cf5a",
              "name": "=feedbackContent",
              "value": "={{ ($json.response || $json.output || 'Thank you for completing the technical interview. Your feedback has been generated based on our conversation.').replace('INTERVIEW_COMPLETE:', '').trim() }}",
              "type": "string"
            },
            {
              "id": "3cc39c3b-a0da-496a-945b-40c9f92dc753",
              "name": "candidateEmail",
              "value": "={{ $('Interview Chat').item.json.body.candidateEmail }}",
              "type": "string"
            },
            {
              "id": "a9125da0-740d-49e6-a552-58dd881fd5d4",
              "name": "sessionId",
              "value": "={{ $('Interview Chat').item.json.body.sessionId }}",
              "type": "string"
            },
            {
              "id": "26088f08-d6ec-4289-8951-43238f7417d9",
              "name": "candidateName",
              "value": "=Candidate",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -480,
        496
      ],
      "id": "cd14a285-ec1e-4a3e-b65c-7b5545499c65",
      "name": "Prepare Email Data"
    },
    {
      "parameters": {
        "sendTo": "={{ $json.candidateEmail }}",
        "subject": "=Technical Interview Feedback - {{ new Date().toLocaleDateString() }}",
        "message": "=<div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">     <div style=\"background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%); color: white; padding: 20px; border-radius: 10px 10px 0 0;\">         <h2 style=\"margin: 0;\">🎯 Technical Interview Feedback</h2>         <p style=\"margin: 10px 0 0 0;\">Session ID: {{ $json.sessionId }}</p>     </div>          <div style=\"background: #f9fafb; padding: 20px; border-radius: 0 0 10px 10px; border: 1px solid #e5e7eb;\">         <div style=\"background: white; padding: 20px; border-radius: 8px; white-space: pre-line; line-height: 1.6;\">             {{ $json.feedbackContent }}         </div>                  <div style=\"margin-top: 20px; padding: 15px; background: #e0f2fe; border-radius: 8px; border-left: 4px solid #0ea5e9;\">             <p style=\"margin: 0; color: #0369a1;\">                 <strong>Next Steps:</strong><br>                 • Review the feedback points above<br>                 • Practice the suggested areas for improvement<br>                 • Keep preparing for your target role<br>                 • You've got this! 💪             </p>         </div>                  <div style=\"margin-top: 20px; text-align: center; color: #6b7280; font-size: 14px;\">             <p>Thank you for using our AI Technical Interview platform!</p>         </div>     </div> </div>",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -320,
        544
      ],
      "id": "8d77b349-2f56-4f57-922f-9a48484312e2",
      "name": "Send a message",
      "webhookId": "bc086775-e121-403f-8299-fda911053e98",
      "credentials": {
        "gmailOAuth2": {
          "id": "hryG4pb6XePrZamH",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "edc2a743-ee9c-4f16-9ec1-dacae8f99d39",
              "name": "response",
              "value": "=✅ Thanks for completing the interview! We’ve sent feedback to your email.",
              "type": "string"
            },
            {
              "id": "c184b0c6-eb5a-461b-a249-834e53eae535",
              "name": "status",
              "value": "=success",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -112,
        544
      ],
      "id": "984f0cad-873a-4678-b2bc-77f3fc7deba6",
      "name": "Final Response"
    },
    {
      "parameters": {
        "jsCode": "// Check if job description exists\nconst jobDescription = $input.item.json.jobDescription;\n\nif (jobDescription && jobDescription.trim().length > 0) {\n  console.log(\"Job description found, length:\", jobDescription.length);\n  \n  return [{\n    json: {\n      ...$input.item.json,\n      hasJobDescription: true,\n      jobDescriptionContent: jobDescription.trim()\n    }\n  }];\n} else {\n  console.log(\"No job description provided\");\n  \n  return [{\n    json: {\n      ...$input.item.json,\n      hasJobDescription: false,\n      jobDescriptionContent: \"\"\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1696,
        96
      ],
      "id": "2232cfa6-3c4e-4fad-81a8-4cf6c3d6dda6",
      "name": "Prepare Job Description Document"
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents_updated",
          "mode": "list",
          "cachedResultName": "documents_updated"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        -352,
        48
      ],
      "id": "e65b9ce5-89ef-4c94-aace-0a1d9945cbf6",
      "name": "Supabase Vector Store2",
      "credentials": {
        "supabaseApi": {
          "id": "hrGCeEKgK6rbrA7V",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "textSplittingMode": "custom",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "file_id",
                "value": "={{$json.sessionId}}_job_description"
              },
              {
                "name": "session_id",
                "value": "={{$json.sessionId}}"
              },
              {
                "name": "document_type",
                "value": "job_description"
              },
              {
                "name": "created_at",
                "value": "={{new Date().toISOString()}}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        -128,
        208
      ],
      "id": "bdf2c3b4-c59b-4399-a4b7-3d47254b1f43",
      "name": "Default Data Loader1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        -288,
        240
      ],
      "id": "a94df19c-8c6f-4ad4-8c70-e82a5add19e5",
      "name": "Embeddings Google Gemini2",
      "credentials": {
        "googlePalmApi": {
          "id": "2jjkPMD5fw4ts7CV",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const sessionData = $input.first().json;\nconst jobDescription = sessionData.jobDescription || '';\nconst sessionId = sessionData.sessionId;\n\n// ALWAYS return something, even if no job description\nif (jobDescription && jobDescription.trim().length > 0) {\n  return [{\n    json: {\n      content: `Job Description:\\n\\n${jobDescription.trim()}`,\n      sessionId: sessionId,\n      documentType: 'job_description'\n    }\n  }];\n} else {\n  // Instead of returning empty array, return a dummy item to keep flow going\n  return [{\n    json: {\n      content: 'No job description provided',\n      sessionId: sessionId,\n      documentType: 'placeholder',\n      skip: true\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -512,
        48
      ],
      "id": "4182a27f-5d6c-42a2-9ff6-1e32819187b8",
      "name": "Create Job Description Document",
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        -32,
        416
      ],
      "id": "125331b8-af6f-4ccc-a94f-c4cf667bb0c1",
      "name": "Character Text Splitter1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/speech-to-text",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1536,
        1392
      ],
      "id": "7c7ab3f5-13a9-41e5-83e2-138fa7726d77",
      "name": "Webhook",
      "webhookId": "2097cc74-f16d-40f6-a4e3-588de6ff37c2"
    },
    {
      "parameters": {
        "jsCode": "const audioData = $input.item.json.body.audioData;\nconst sessionId = $input.item.json.body.sessionId;\nconst candidateEmail = $input.item.json.body.candidateEmail;\n\nif (!audioData) {\n    throw new Error('No audio data provided');\n}\n\ntry {\n    // Convert base64 to buffer\n    const buffer = Buffer.from(audioData, 'base64');\n    \n    console.log('Audio buffer size:', buffer.length);\n    \n    return [{\n        json: {\n            sessionId,\n            candidateEmail,\n            audioSize: buffer.length\n        },\n        binary: {\n            audio: {\n                data: buffer,\n                mimeType: 'audio/webm', // Match the frontend format\n                fileName: 'recording.webm'\n            }\n        }\n    }];\n} catch (error) {\n    throw new Error(`Failed to process audio data: ${error.message}`);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1328,
        1392
      ],
      "id": "c762a037-f8ca-4e8a-90ad-b9f8704fe268",
      "name": "Extract Audio Data"
    },
    {
      "parameters": {
        "jsCode": "const deepgramResponse = $input.item.json;\n\nconsole.log('Deepgram response:', JSON.stringify(deepgramResponse));\n\n// Check if response has error\nif (deepgramResponse.error) {\n    throw new Error(`Deepgram error: ${deepgramResponse.error}`);\n}\n\n// Extract transcription from Deepgram response\nlet transcription = '';\nlet confidence = 0;\n\nif (deepgramResponse.results && \n    deepgramResponse.results.channels && \n    deepgramResponse.results.channels[0] && \n    deepgramResponse.results.channels[0].alternatives && \n    deepgramResponse.results.channels[0].alternatives[0]) {\n    \n    const alternative = deepgramResponse.results.channels[0].alternatives[0];\n    transcription = alternative.transcript || '';\n    confidence = alternative.confidence || 0;\n}\n\n// If no transcription found, return appropriate message\nif (!transcription.trim()) {\n    return [{\n        json: {\n            transcription: '',\n            confidence: 0,\n            status: 'no_speech_detected',\n            message: 'No speech detected in audio'\n        }\n    }];\n}\n\nreturn [{\n    json: {\n        transcription: transcription.trim(),\n        confidence: confidence,\n        status: 'success'\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -912,
        1392
      ],
      "id": "1fdf1b75-8c90-4288-9afc-dfe6115bf07c",
      "name": "Process Deepgram Response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"transcription\": \"{{ $json.transcription || '' }}\",\n  \"confidence\": \"{{ $json.confidence || 0 }}\",\n  \"status\": \"{{ $json.status }}\",\n  \"message\": \"{{ $json.message || 'Transcription completed' }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -704,
        1392
      ],
      "id": "e2869923-93df-4a56-a29a-75c9741fad92",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.deepgram.com/v1/listen",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "nova-2"
            },
            {
              "name": "smart_format",
              "value": "true"
            },
            {
              "name": "punctuate",
              "value": "true"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "audio/webm"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "audio",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1120,
        1392
      ],
      "id": "4b5156ff-fff3-4b1b-a932-a1aea89d82cf",
      "name": "Deepgram HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "hbLhBg68X0hqMcR1",
          "name": "Deepgram Credentials"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/interview-chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1520,
        592
      ],
      "id": "2b2cdfbe-457a-4c78-bda6-4b2c7333d02c",
      "name": "Interview Chat",
      "webhookId": "145d8cac-21cc-4221-bff8-995d8b806fdf"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/upload-resume",
        "responseMode": "responseNode",
        "options": {
          "binaryPropertyName": "resume"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -2128,
        128
      ],
      "id": "1ae8af35-1797-4c7c-81cf-0519d47b6f80",
      "name": "Upload Resume",
      "webhookId": "5fbb3086-065d-41e9-ab5d-b5f339d352c0"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "wegatan582.app.n8n.cloud",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36",
            "content-length": "20935",
            "accept": "application/json",
            "accept-encoding": "gzip, br",
            "accept-language": "en-US,en;q=0.9",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "cf-connecting-ip": "96.242.29.142",
            "cf-ew-via": "15",
            "cf-ipcountry": "US",
            "cf-ray": "980d666d3495ae70-EWR",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-worker": "n8n.cloud",
            "content-type": "application/json",
            "origin": "https://mathumathi0989.github.io",
            "priority": "u=1, i",
            "referer": "https://mathumathi0989.github.io/",
            "sec-ch-ua": "\"Chromium\";v=\"140\", \"Not=A?Brand\";v=\"24\", \"Google Chrome\";v=\"140\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"macOS\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            "x-forwarded-for": "96.242.29.142, 104.23.187.52",
            "x-forwarded-host": "wegatan582.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "traefik-prod-users-gwc-7-c479b4d45-6cbb8",
            "x-is-trusted": "yes",
            "x-real-ip": "96.242.29.142"
          },
          "params": {},
          "query": {},
          "body": {
            "audioData": "",
            "sessionId": "tech_interview_1758162340344_0v79hcruj",
            "candidateEmail": "mathumathi.b@gmail.com"
          },
          "webhookUrl": "https://wegatan582.app.n8n.cloud/webhook/speech-to-text",
          "executionMode": "production"
        }
      }
    ],
    "Interview Chat": [
      {
        "json": {
          "headers": {
            "host": "wegatan582.app.n8n.cloud",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36",
            "content-length": "152",
            "accept": "application/json",
            "accept-encoding": "gzip, br",
            "accept-language": "en-US,en;q=0.9",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "cf-connecting-ip": "96.242.29.142",
            "cf-ew-via": "15",
            "cf-ipcountry": "US",
            "cf-ray": "980d6f48160c1a5c-EWR",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-worker": "n8n.cloud",
            "content-type": "application/json",
            "origin": "https://mathumathi0989.github.io",
            "priority": "u=1, i",
            "referer": "https://mathumathi0989.github.io/",
            "sec-ch-ua": "\"Chromium\";v=\"140\", \"Not=A?Brand\";v=\"24\", \"Google Chrome\";v=\"140\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"macOS\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            "x-forwarded-for": "96.242.29.142, 104.23.187.52",
            "x-forwarded-host": "wegatan582.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "traefik-prod-users-gwc-7-c479b4d45-6cbb8",
            "x-is-trusted": "yes",
            "x-real-ip": "96.242.29.142"
          },
          "params": {},
          "query": {},
          "body": {
            "message": "I have around eight years of QA experience.",
            "sessionId": "tech_interview_1758162741527_x2thrcovb",
            "candidateEmail": "mathumathi.b@gmail.com"
          },
          "webhookUrl": "https://wegatan582.app.n8n.cloud/webhook/interview-chat",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "main": [
        [
          {
            "node": "Create Job Description Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Session Data": {
      "main": [
        [
          {
            "node": "Prepare Job Description Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Base64 to Binary": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Respond to Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Prepare Email Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Email Data": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final Response": {
      "main": [
        [
          {
            "node": "Respond to Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Job Description Document": {
      "main": [
        [
          {
            "node": "Convert Base64 to Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader1": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store2",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini2": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store2": {
      "main": [
        [
          {
            "node": "Respond to Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Job Description Document": {
      "main": [
        [
          {
            "node": "Supabase Vector Store2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter1": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader1",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Audio Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Audio Data": {
      "main": [
        [
          {
            "node": "Deepgram HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Deepgram Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deepgram HTTP Request": {
      "main": [
        [
          {
            "node": "Process Deepgram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interview Chat": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Resume": {
      "main": [
        [
          {
            "node": "Extract Session Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a0a89fc8-2241-4c6e-a2eb-c6f95efeb9db",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ba80fd22c90af5ce240ae289af9203bc0f152e2b55eca44ddf44c12cdff20257"
  },
  "id": "yOeZPUZMK1hEn5sy",
  "tags": []
}